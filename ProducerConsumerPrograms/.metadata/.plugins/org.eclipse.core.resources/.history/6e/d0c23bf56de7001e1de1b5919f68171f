package com.producer.consumer.example;

import java.util.LinkedList;

public class ThreadExample {
	public static void main(String[] args) throws InterruptedException{
		final PC pc = new PC();
		Thread t1 = new Thread(new Runnable() {
			
			@Override
			public void run() {
				try {
					pc.produce();
				}catch(InterruptedException ex) {
					ex.printStackTrace();
				}
			}
		});
		
		Thread t2 = new Thread(new Runnable() {
			
			@Override
			public void run() {
				try {
					pc.consume();
				}catch(InterruptedException ex) {
					ex.printStackTrace();
				}
			}
		});
		
		t1.start();
		t2.start();
		
		t1.join();
		t2.join();
		
		
	}
	
	public static class PC {
		LinkedList<Integer> list = new LinkedList<Integer>();
		int capacity=2;
		
		//Function called by Producer Thread
		public void produce() throws InterruptedException{
			int value=0;
			
			while(true) {
				synchronized(this) {
					while(list.size() == capacity) {
						wait();
					}
					System.out.println("Producer produced-"+value);
					
					list.add(value++);
					
					notify();
					
					Thread.sleep(1000);
				}
			}
		}
		
		public void consume() throws InterruptedException {
			while(true) {
				synchronized (this) {
					while(list.size() == 0) {
						wait();
					}
					
					int value = list.removeFirst();
					System.out.println("Consumer consumed-"+value);
					
					notify();
					
					Thread.sleep(1000);
				}
			}
		}
	}
}
